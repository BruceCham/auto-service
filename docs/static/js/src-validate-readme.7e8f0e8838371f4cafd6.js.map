{"version":3,"sources":["/Users/yangqianjun/Documents/project/sm2tsservice/__tests__/Validate.tsx","/Users/yangqianjun/Documents/project/sm2tsservice/src/validate/README.mdx"],"names":["IProxyHandleConfig","React","ISMValidateInfo","ISMAjaxConfig","ISMAbstractResponse","IIncomingMessage","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"gxBAYaA,EAAb,sIAAwCC,a,4MACjC,IAAMC,EAAb,sIAAqCD,a,yMAC9B,IAAME,EAAb,sIAAmCF,a,uMAC5B,IAAMG,EAAb,sIAAyCH,a,6MAClC,IAAMI,EAAb,sIAAsCJ,a,kPCFtC,IAKMK,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,oDADR,oDAGA,gVACA,iBAAQ,CACN,GAAM,mBADR,oBAGA,sBACE,kBAAIC,WAAW,MAAf,kGACA,kBAAIA,WAAW,MAAf,oEAEF,iBAAQ,CACN,GAAM,WADR,YAGA,sBACE,kBAAIA,WAAW,MAAf,+GACA,kBAAIA,WAAW,MAAf,4HACA,kBAAIA,WAAW,MAAf,mHACA,kBAAIA,WAAW,MAAf,2GAEF,iBAAQ,CACN,GAAM,SADR,UAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2NAOL,iBAAQ,CACN,GAAM,yBADR,0BAGA,sIACA,YAAC,IAAD,CAAOC,GAAIb,EAAoBW,QAAQ,UACvC,iBAAQ,CACN,GAAM,sBADR,uBAGA,YAAC,IAAD,CAAOE,GAAIX,EAAiBS,QAAQ,UACpC,iBAAQ,CACN,GAAM,oBADR,qBAGA,YAAC,IAAD,CAAOE,GAAIV,EAAeQ,QAAQ,UAClC,iBAAQ,CACN,GAAM,0BADR,2BAGA,YAAC,IAAD,CAAOE,GAAIT,EAAqBO,QAAQ,UACxC,iBAAQ,CACN,GAAM,uBADR,wBAGA,YAAC,IAAD,CAAOE,GAAIR,EAAkBM,QAAQ,UACrC,iBAAQ,CACN,GAAM,4DADR,4DAGA,qIACA,iBAAQ,CACN,GAAM,yBADR,0BAGA,8GACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,yiCAkCL,iBAAQ,CACN,GAAM,8BADR,+BAGA,mNACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2aAOL,iOACA,iBAAQ,CACN,GAAM,4DADR,6DAGA,6BACA,oE,6KAKJJ,EAAWM,gBAAiB","file":"static/js/src-validate-readme.797bbaa7.js","sourcesContent":["/**\n * @file: 生成文档用\n * @author: yangqianjun\n * @Date: 2020-01-14 16:28:13\n * @LastEditors: yangqianjun\n * @LastEditTime: 2020-01-14 17:06:29\n */\n\nimport { IncomingMessage } from 'http';\nimport * as React from 'react';\nimport { ProxyHandleConfig, SMValidateInfo, SMAjaxConfig, SMAbstractResponse } from '../src/consts';\n\nexport class IProxyHandleConfig extends React.Component<ProxyHandleConfig> { }\nexport class ISMValidateInfo extends React.Component<SMValidateInfo> { }\nexport class ISMAjaxConfig extends React.Component<SMAjaxConfig> { }\nexport class ISMAbstractResponse extends React.Component<SMAbstractResponse> { }\nexport class IIncomingMessage extends React.Component<IncomingMessage> { }\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Props } from 'docz';\nimport {\n  IProxyHandleConfig,\n  ISMValidateInfo,\n  ISMAjaxConfig,\n  ISMAbstractResponse,\n  IIncomingMessage\n} from '../../__tests__/Validate.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"autos-数据校验中间件\"\n    }}>{`Autos 数据校验中间件`}</h1>\n    <p>{`Autos 内置了对接口调用前端传参、后端数据返回是否符合接口文档约定的校验功能，可通过 http-proxy-middleware 中间件的形式使用。`}</p>\n    <h2 {...{\n      \"id\": \"11-特性\"\n    }}>{`1.1 特性`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`校验 query, path, postJSON, post form 参数是否符合约定`}</li>\n      <li parentName=\"ul\">{`校验 response json 是否符合约定`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"12-todo\"\n    }}>{`1.2 TODO`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`不能正确校验 websocket 请求参数是否符合约定`}</li>\n      <li parentName=\"ul\">{`不能正确校验文件上传请求参数是否符合约定`}</li>\n      <li parentName=\"ul\">{`可能不能正确校验 headers 内参数是否符合约定`}</li>\n      <li parentName=\"ul\">{`未校验非 json 响应数据格式是否符合约定`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"2-api\"\n    }}>{`2. API`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { createProxyMiddleware } = require('http-proxy-middleware');\nconst { proxyHandle } = require('auto-service/lib/validate');\n\nproxyHandle(proxies: proxyConfig || proxyConfig[], config: IProxyHandleConfig)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"21-iproxyhandleconfig\"\n    }}>{`2.1 IProxyHandleConfig`}</h2>\n    <p>{`IProxyHandleConfig 用以配置校验中间件的相关行为。`}</p>\n    <Props of={IProxyHandleConfig} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"22-ismvalidateinfo\"\n    }}>{`2.2 ISMValidateInfo`}</h2>\n    <Props of={ISMValidateInfo} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"23-ismajaxconfig\"\n    }}>{`2.3 ISMAjaxConfig`}</h2>\n    <Props of={ISMAjaxConfig} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"24-ismabstractresponse\"\n    }}>{`2.4 ISMAbstractResponse`}</h2>\n    <Props of={ISMAbstractResponse} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"25-iincomingmessage\"\n    }}>{`2.5 IIncomingMessage`}</h2>\n    <Props of={IIncomingMessage} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"3-快速上手---面向前端-fe\"\n    }}>{`3 快速上手 - 面向前端 FE`}</h2>\n    <p>{`适用于前后端联调阶段，提升联调效率。`}</p>\n    <h2 {...{\n      \"id\": \"31-配置-proxy\"\n    }}>{`3.1 配置 proxy`}</h2>\n    <p>{`配置 webpack proxy，如 cra 标配的 src/setupProxy.js：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { createProxyMiddleware } = require('http-proxy-middleware');\n/**\n * @typedef { import('auto-service/lib/consts').ProxyHandleConfig } ProxyHandleConfig\n */\nconst { proxyHandle } = require('auto-service/lib/validate');\n\nmodule.exports = function (app) {\n  app.use(\n    '/test/api',\n    createProxyMiddleware({\n      ...proxyHandle(\n        {},\n        /** @type {ProxyHandleConfig} 配置 */\n        {\n          // 加载本地 swagger 文档的逻辑\n          loadSwagger: () => require('../swagger.json'),\n          // 返回接口返回的 result 字段\n          formatBodyBeforeValidate: (data) => data.result,\n          // 自定义校验信息显示逻辑\n          onValidate: (res) => {\n            const { code, result: { receive, send } = {}, message } = res;\n            if (code) {\n              // do something\n            }\n          }\n      )[0],\n      target: PROXY_TARGET,\n      changeOrigin: true\n    })\n  )\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"32-默认-onvalidate\"\n    }}>{`3.2 默认 onValidate`}</h2>\n    <p>{`当传参或数据返回不符合文档约定时，默认 onValidate 配置会打出如下信息：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`  接口 /mix/{id}/ 参数不符合约定: data.body.id should be number\n  接口 /mix/{id}/ 数据返回不符合约定: data.code should be number\n  接口 /mix/{id}/ 参数不符合约定: data.body.id should be number\n  接口 /mix/{id}/ 数据返回不符合约定: data.code should be number\n`}</code></pre>\n    <p>{`你可以配置在 onValidate 内配置任意的处理逻辑，例如向与你联调的 RD 发送 IM 消息。`}</p>\n    <h2 {...{\n      \"id\": \"4-快速上手---面向测试-qa\"\n    }}>{`4. 快速上手 - 面向测试 QA`}</h2>\n    <p>{`TODO`}</p>\n    <p>{`自动测试并校验`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}