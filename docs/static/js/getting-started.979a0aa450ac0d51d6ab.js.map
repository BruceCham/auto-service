{"version":3,"sources":["/Users/yangqianjun/Documents/project/sm2tsservice/__tests__/Doc.tsx","/Users/yangqianjun/Documents/project/sm2tsservice/CHANGELOG.md","/Users/yangqianjun/Documents/project/sm2tsservice/GettingStarted.mdx"],"names":["IGuardConfig","React","IYAPIConfig","ISwaggerParser","IJson2Service","IRequest","ISwaggerConfig","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","of"],"mappings":"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","file":"static/js/getting-started.48305845.js","sourcesContent":["/**\n * @file: 生成文档用\n * @author: yangqianjun\n * @Date: 2020-01-14 16:28:13\n * @LastEditors: yangqianjun\n * @LastEditTime: 2020-01-14 17:06:29\n */\n\nimport * as React from 'react';\nimport { CoreOptions } from 'request';\nimport { GuardConfig, YAPIConfig, SwaggerParser, Json2Service } from '../src/consts';\n\nexport class IGuardConfig extends React.Component<GuardConfig> { }\nexport class IYAPIConfig extends React.Component<YAPIConfig> { }\nexport class ISwaggerParser extends React.Component<SwaggerParser> { }\nexport class IJson2Service extends React.Component<Json2Service> { }\nexport class IRequest extends React.Component<{ url?: string } & CoreOptions> { }\nexport class ISwaggerConfig extends React.Component<Json2Service['swaggerConfig']> { }\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3 {...{\n      \"id\": \"360\"\n    }}>{`3.6.0`}</h3>\n    <p>{`支持增量更新 Service 文件，比如对于 API.ts，如果内容未发生变动，则不会重新生成 API.ts。`}</p>\n    <p>{`如果使用了自动格式化代码工具，需要在配置文件内配置 formater 参数来取代之前的调用方式，比如之前在 package.json 里配置：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"scripts\": \"autos -c json2service.js --clear && prettier src/services/**/**.ts --write\"\n}\n`}</code></pre>\n    <p>{`需要移除 \"prettier src/services/`}<strong parentName=\"p\">{`/`}</strong>{`.ts --write\"，并在 json2service.js 里配置：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  swaggerConfig: {\n    formater: 'npx prettier {path}/**/**.ts --write --loglevel error --with-node-modules'\n  },\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { Props } from 'docz';\nimport {\n  IGuardConfig,\n  IYAPIConfig,\n  ISwaggerParser,\n  IJson2Service,\n  IRequest,\n  ISwaggerConfig\n} from './__tests__/Doc.tsx';\nimport CHANGELOG from './CHANGELOG.md';\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h1>\n    <h2 {...{\n      \"id\": \"1-安装-autos\"\n    }}>{`1. 安装 Autos`}</h2>\n    <p>{`通过 npm 安装 Autos。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ npm i -D auto-service\n$ npx autos --help\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-参数配置\"\n    }}>{`2. 参数配置`}</h2>\n    <h2 {...{\n      \"id\": \"21-命令行参数\"\n    }}>{`2.1 命令行参数`}</h2>\n    <p>{`以下可直接通过命令行设置的参数：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  -V, --version                  output the version number\n  -c, --config [path]            config file (default: \"json2service.json\" or \"json2service.js\")\n  --clear                        rm typescript service before gen\n  --quiet                        auto merge without popup\n  --apis [boolean]               是否生成 apis，如果未指定 models 且未指定 typeScriptDataFile 则会生成 apis\n  --models [boolean]             是否生成 models，如果未指定 apis 且未指定 typeScriptDataFile 则会生成 models\n  --typeScriptDataFile [string]  是否仅生成 TypeScript Data，可用于完全自定义生成逻辑\n  -h, --help                     output usage information\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"22-主配置文件\"\n    }}>{`2.2 主配置文件`}</h2>\n    <p>{`Autos 默认从当前目录下的 json2service.json 文件读取主配置，我们也可以通过命令行参数 `}<inlineCode parentName=\"p\">{`-c, --config`}</inlineCode>{` 指定任意格式为 JSON 或者 JavaScript 的配置文件。`}</p>\n    <p>{`配置文件必须导出一个对象，包含以下可配置属性：`}</p>\n    <Props of={IJson2Service} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"221-yapiconfig-参数\"\n    }}>{`2.2.1 yapiConfig 参数`}</h2>\n    <p>{`yapiConfig 用以配置将 YApi 格式接口文档转换成 Swagger 接口文档格式的各种规则。`}</p>\n    <Props of={IYAPIConfig} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"222-swaggerparser-参数\"\n    }}>{`2.2.2 swaggerParser 参数`}</h2>\n    <p>{`swaggerParser 用以配置直接透传给 Swagger Codegen Java 生成工具的各种参数。`}</p>\n    <Props of={ISwaggerParser} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"223-guardconfig-参数\"\n    }}>{`2.2.3 guardConfig 参数`}</h2>\n    <p>{`guardConfig 用以配置检查接口文档是否符合规范的各种规则。`}</p>\n    <Props of={IGuardConfig} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"224-requestconfig-参数\"\n    }}>{`2.2.4 requestConfig 参数`}</h2>\n    <p>{`requestConfig 用以配置，当需要使用 http 请求从服务器侧下载接口文档文件时的各种参数。`}</p>\n    <Props of={IRequest} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"225-swaggerconfig-参数\"\n    }}>{`2.2.5 swaggerConfig 参数`}</h2>\n    <p>{`swaggerConfig 用以配置在 Swagger 将被 Swagger Codegen 转换为目标代码前的各种修改器。`}</p>\n    <Props of={ISwaggerConfig} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"226-示例\"\n    }}>{`2.2.6 示例`}</h2>\n    <p>{`以下是一个完整的主配置示例。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"url\": \"./api.json\", // 文件路径\n  \"remoteUrl\": \"http://**\", // url\n  \"requestConfig\": {\n    \"url\": \"./api.json\" // 文件路径或url\n    // 以下所有 request 支持的参数\n    // headers?: Headers;\n    // baseUrl?: string;\n    // callback?: RequestCallback;\n    // jar?: CookieJar | boolean;\n    // formData?: { [key: string]: any };\n    // form?: { [key: string]: any } | string;\n    // auth?: AuthOptions;\n    // oauth?: OAuthOptions;\n    // aws?: AWSOptions;\n    // hawk?: HawkOptions;\n    // qs?: any;\n    // qsStringifyOptions?: any;\n    // qsParseOptions?: any;\n    // json?: any;\n    // jsonReviver?: (key: string, value: any) => any;\n    // jsonReplacer?: (key: string, value: any) => any;\n    // multipart?: RequestPart[] | Multipart;\n    // agent?: http.Agent | https.Agent;\n    // agentOptions?: http.AgentOptions | https.AgentOptions;\n    // agentClass?: any;\n    // forever?: any;\n    // host?: string;\n    // port?: number;\n    // method?: string;\n    // body?: any;\n    // family?: 4 | 6;\n    // followRedirect?: boolean | ((response: http.IncomingMessage) => boolean);\n    // followAllRedirects?: boolean;\n    // followOriginalHttpMethod?: boolean;\n    // maxRedirects?: number;\n    // removeRefererHeader?: boolean;\n    // encoding?: string | null;\n    // pool?: any;\n    // timeout?: number;\n    // localAddress?: string;\n    // proxy?: any;\n    // tunnel?: boolean;\n    // strictSSL?: boolean;\n    // rejectUnauthorized?: boolean;\n    // time?: boolean;\n    // gzip?: boolean;\n    // preambleCRLF?: boolean;\n    // postambleCRLF?: boolean;\n    // withCredentials?: boolean;\n    // key?: Buffer;\n    // cert?: Buffer;\n    // passphrase?: string;\n    // ca?: string | Buffer | string[] | Buffer[];\n    // har?: HttpArchiveRequest;\n    // useQuerystring?: boolean;\n  },\n  \"type\": \"yapi\",\n  \"yapiConfig\": {\n    \"required\": false,\n    \"bodyJsonRequired\": false,\n    \"categoryMap\": {\n      \"中文\": \"English\" // yapi 接口分类中英文映射\n    }\n  },\n  \"swaggerParser\": {\n    \"-o\": \"tmp/services\"\n  },\n  \"validateResponse\": false, // 是否生成校验逻辑\n  \"guardConfig\": {\n    // + strict 严格模式\n    //    - 校验 swagger tags【yapi 接口分类】是否是纯英文\n    //    - 方法名使用 http method + url 驼峰形式\n    //    - 新项目采用\n    // + safe 安全模式\n    //    - 方法名使用 http method + url 驼峰形式\n    //    - 老项目升级，不会校验 tags，会生成方法调用替换映射表\n    // + 默认\n    //    - http method + url => operationId 映射锁定\n    //    - 老项目维持现状\n    \"mode\": \"strict\",\n    // swagger 处理重复 operationId 逻辑有风险，因此需要锁定映射关系\n    \"methodUrl2OperationIdMap\": {\n      \"get /api/xxx/xxx\": \"operationId\"\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"23-使用方式\"\n    }}>{`2.3 使用方式`}</h2>\n    <h3 {...{\n      \"id\": \"npx\"\n    }}>{`npx`}</h3>\n    <p>{`安装 npx `}<inlineCode parentName=\"p\">{`npm i -g npx`}</inlineCode>{`，通过 npx 直接使用 Autos 生成目标代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`  npx autos # 使用默认配置\n  npx autos -c config.json # 指定配置文件\n  npx autos --clear # 清空上次生成产物\n  npx autos --quiet # 自动全量使用远程文档，不显示 diff & merge 页面\n  npx autos --models # 仅生成 models\n  npx autos --models --apis # 仅生成 models & apis\n  npx autos --typeScriptDataFile TypeSciptData.json # 仅生成类型信息 json 到 TypeSciptData.json\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"npm-scripts\"\n    }}>{`npm scripts`}</h3>\n    <p>{`通过 npm scripts 使用 Autos 生成目标代码，在 package.json 内添加：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"scripts\": {\n    \"api\": \"autos --clear\"\n  }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`npm run api`}</inlineCode>{` 生成目标代码。`}</p>\n    <h2 {...{\n      \"id\": \"3-ajax-接口\"\n    }}>{`3. Ajax 接口`}</h2>\n    <p>{`Autos 生成的 Service 代码内包含以下和后端进行通信的固定代码：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';\n`}</code></pre>\n    <p>{`你可以参考 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/e-kit/ekit/blob/master/packages/ajax/src/new-ajax.ts\"\n      }}>{`@ekit/ajax`}</a>{` 代码实现自定义的 `}<inlineCode parentName=\"p\">{`@ajax`}</inlineCode>{` 模块，或者按照以下接口定义，实现自定义的 `}<inlineCode parentName=\"p\">{`@ajax`}</inlineCode>{` 模块：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/** 不再兼容非标准的数据结构 */\nexport declare type AjaxPromise<R> = Promise<R>;\n/** 非标准包裹 */\nexport declare type NonStandardAjaxPromise<R> = Promise<{\n  code?: number;\n  message?: string;\n  result: R;\n}>;\nexport interface ExtraFetchParams {\n  /** extra data for extends */\n  extra?: any;\n  /** 扩展请求头 */\n  headers?: any;\n  /** cancel request */\n  cancel?: Promise<string | undefined>;\n}\nexport interface WrappedFetchParams extends ExtraFetchParams {\n  /** http method */\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'PATCH' | 'HEAD';\n  url: string;\n  /** post json data */\n  data?: any;\n  /** post form data */\n  form?: any;\n  /** query data */\n  query?: any;\n  /** header */\n  header?: any;\n  /** path data */\n  path?: any;\n}\nexport declare class Ajax {\n  /** ajax 方法 */\n  ajax(\n    { method, url, data, form, query, header, extra, cancel, headers }: WrappedFetchParams,\n    path?: string,\n    basePath?: string\n  ): Promise<any>;\n  /** 接口传参校验 */\n  check<V>(value: V, name: string): void;\n  /** 新 fetch 接口，>= 3.5.4 */\n  public autosFetch<S extends keyof AutosAPIS>(\n    source: S,\n    ...args: AutosAPIS[S][0]\n  ): Promise<AutosAPIS[S][1]> {\n    const { isFile, opt, ...config } = (args[0] || {}) as AutosParams;\n    let { headers = {} } = opt || {};\n    if (isFile) {\n      headers = {\n        ...headers,\n        'Content-Type': 'multipart/form-data'\n      };\n    }\n    const [method, url] = source.split(' ') as [WrappedFetchParams['method'], string];\n    return this.ajax({\n      ...config,\n      ...opt,\n      method,\n      url: config.path\n        ? url.replace(\n            /(({[^}]+})|(:[^/:]+$)|(:[^:/]+))/g,\n            all => config.path![all.replace(/[:{}]/g, '')] || ''\n          )\n        : url,\n      headers\n    });\n  }\n}\ndeclare const _default: Ajax;\nexport default _default;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"4-增量更新\"\n    }}>{`4. 增量更新`}</h2>\n    <p>{`Autos 支持交互勾选界面、增量同步远程增、删、改差异到本地文档。`}</p>\n    <h3 {...{\n      \"id\": \"流程步骤\"\n    }}>{`流程步骤`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`主配置文件配置 url 和 remoteUrl`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`url - 本地接口文档文件路径【如文件不存在，在获取 remoteUrl 指定地址内容后，创建该文件】`}</li>\n          <li parentName=\"ul\">{`remoteUrl - 新版接口文档 url 或者路径`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`执行 Autos`}</li>\n      <li parentName=\"ul\">{`Autos 对本地接口文档文件和新版接口文档进行 diff`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`有差异`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`打开浏览器，人工选择需要同步的差异，点击“保存”`}</li>\n              <li parentName=\"ul\">{`Autos patch Delta 生成同步差异后的接口文档`}</li>\n              <li parentName=\"ul\">{`进入下一步`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`无差异`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`直接进入下一步`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Autos 调用 Swagger Codegen 生成目标代码`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"5-简洁模式\"\n    }}>{`5. 简洁模式`}</h2>\n    <p>{`从 3.5.4 版本起，当配置 `}<inlineCode parentName=\"p\">{`swaggerParser['-t']`}</inlineCode>{` 参数为 `}<inlineCode parentName=\"p\">{`'plugins/typescript-tkit-autos'`}</inlineCode>{` 时，Autos 会生成通过 url 调用的类型安全的 service 代码，如以下示例所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ExtraFetchParams } from '@ajax';\nimport * as models from '../model/models';\n\ndeclare global {\n  interface AutosAPIS {\n    'GET /ts-boilerplate/api/user/info': [\n      (\n        | []\n        | [\n            {\n              opt?: ExtraFetchParams;\n            }\n          ]\n      ),\n      models.UserInfo\n    ];\n  }\n}\n`}</code></pre>\n    <p>{`此时，我们需要使用新版的框架配套的 ajax 或者自行实现 `}<inlineCode parentName=\"p\">{`autosFetch`}</inlineCode>{`，如以下示例所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`declare global {\n  interface AutosAPIS {\n    /** 测试接口 */\n    'DEMO /ajax/test': [[{}], {}];\n  }\n}\n// ...\nfunction autosFetch<S extends keyof AutosAPIS>(\n  source: S,\n  ...args: AutosAPIS[S][0]\n): Promise<AutosAPIS[S][1]> {\n  const { isFile, opt, ...config } = (args[0] || {}) as AutosParams;\n  let { headers = {} } = opt || {};\n  if (isFile) {\n    headers = {\n      ...headers,\n      'Content-Type': 'multipart/form-data'\n    };\n  }\n  // ...\n}\n`}</code></pre>\n    <p>{`如此，我们就可以直接通过 url 调用 service 代码，如以下示例所示（tCall 需要更新 redux-model 到最新的版本）：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function* test() {\n  const data = autosFetch('POST /ts-boilerplate/api/download');\n  const res: AutosAPIS['POST /ts-boilerplate/api/download'][1] = yield tCall(\n    autosFetch,\n    'POST /ts-boilerplate/api/download'\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"6-changelog\"\n    }}>{`6. CHANGELOG`}</h2>\n\n    <CHANGELOG mdxType=\"CHANGELOG\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}